#!/usr/bin/python3
import requests
import json
import time
class SynapseAdmin:
    def __init__(self, server, username, password):
        self.server = server
        self.headers = {}
        self.auth = self.do_login(username, password)
        self.headers = {
            "Authorization": "Bearer "+self.auth
        }

    def do_login(self, username, password):
        endpoint = "_matrix/client/r0/login"
        data = {"type":"m.login.password", "user":username, "password":password}
        ret = self.do_post(endpoint, data)
        return ret["access_token"]

    def do_post(self,endpoint, data):
        r = requests.post('/'.join([self.server,endpoint]), data=json.dumps(data), headers=self.headers)
        return r.json()
    def do_get(self,endpoint, params):
        r = requests.get('/'.join([self.server,endpoint]),params=params, headers=self.headers)
        return r.json()

    def purge_empty_rooms(self):
        for e in self.get_rooms():
            print(e)
            if e["joined_members"] == 0 and e["joined_local_members"] == 0 :
                self.delete_room(e["room_id"])
    def purge_guests(self):
        for e in self.get_users({"guests": "true"}):
            if e["is_guest"] == 1:
                last_seen = 0
                sessions = self.do_get(f"_synapse/admin/v1/whois/{e['name']}", {})["devices"]['']["sessions"]
                for s in sessions:
                    for sc in s["connections"]:
                        if sc["last_seen"] > last_seen:
                            last_seen = sc["last_seen"]
                
                if last_seen < time.time() - 86400:
                    self.desactivate_user(e["name"])

    def delete_room(self, id):
        endpoint = f"_synapse/admin/v1/rooms/{id}/delete"
        return self.do_post(endpoint, {"block": True, "purge": True})

    def desactivate_user(self, name):
        endpoint = f"_synapse/admin/v1/deactivate/{name}"
        return self.do_post(endpoint, {"erase": True})
    def get_rooms(self, params={}):
        endpoint = "_synapse/admin/v1/rooms"
        return self.do_get(endpoint, params)["rooms"]

    def get_users(self, params={}):
        endpoint = "_synapse/admin/v2/users"
        return self.do_get(endpoint, params)["users"]

if __name__ == "__main__":
    adm = SynapseAdmin("https://chat.newgen.ngpaas.com", "admin", "Egaeva0upaiteixi")
    print(adm.purge_empty_rooms())
    print(adm.purge_guests())